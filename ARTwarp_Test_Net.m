% FORMATTINGclear allclose gcfload Transient081_2-traincd C:\matlab\workDATA = dir('C:\MATLAB\work\*.ctr');DATA = rmfield(DATA,'date');DATA = rmfield(DATA,'bytes');DATA = rmfield(DATA,'isdir');[numSamples x] = size(DATA);o = zeros(1, 250);for c1 = 1:numSamples    eval(['load ' DATA(c1).name ' -mat'])    DATA(c1).contour = interp1(1:length(freqContour)-1, freqContour(1:end-1), 1:10/2.902:length(freqContour)-1);    DATA(c1).length = length(freqContour(1:end-1));    DATA(c1).category = 0;endXmax = 0;for c1 = 1:NET.numCategories    weight = NET.weight(:,c1);    Xmax = max([Xmax length(find(weight > 0))]);endYmax = max(max(NET.weight));[numSamples x] = size(DATA); numCols = round(NET.numCategories^0.5);numRows = numCols+1;rowHeight = (0.98 - 0.01*numRows)/numRows;colWidth = (0.98 - 0.01*numCols)/(numCols+1);% GENERATE FIGUREh0 = figure('Units','normalized', ...    'Color',[0.752941176470588 0.752941176470588 0.752941176470588], ...    'MenuBar','none', ...    'Name','ART2 Neural Network', ...    'NumberTitle','off', ...    'PaperPosition',[18 180 576 432], ...    'PaperUnits','points', ...    'Position',[0 0.04036458333333333 1 0.8671875], ...    'Tag','Figure1');h1 = axes('Parent',h0, ...    'Units','normalized', ...    'CameraUpVector',[0 1 0], ...    'CameraUpVectorMode','manual', ...    'Position',[0.01 (rowHeight+0.01)*(numRows-1) + 0.01 colWidth rowHeight ], ...    'Tag', '0', ...    'XTick',[], ...    'YTick',[]);h2 = text('Parent',h1, ...    'Units','normalized', ...    'FontSize',9, ...    'HorizontalAlignment','center', ...    'Position',[0.5 1], ...    'String',' ', ...    'Tag','T0', ...    'VerticalAlignment', 'cap');h1 = axes('Parent',h0, ...    'Units','normalized', ...    'CameraUpVector',[0 1 0], ...    'CameraUpVectorMode','manual', ...    'Position',[(colWidth) + 0.02 (rowHeight+0.01)*(numRows-1) + 0.01 colWidth rowHeight], ...    'Tag', 'X', ...    'Visible', 'off', ...    'XTick',[], ...    'YTick',[]);h2 = text('Parent',h1, ...    'FontSize',9, ...    'HorizontalAlignment','left', ...    'Position',[0 1], ...    'String','Input:',...    'VerticalAlignment', 'cap');h2 = text('Parent',h1, ...    'FontSize',9, ...    'HorizontalAlignment','left', ...    'Position',[0 0.5], ...    'String','Match:',...    'VerticalAlignment', 'cap');h2 = text('Parent',h1, ...    'FontSize',9, ...    'HorizontalAlignment','left', ...    'Position',[0.5 1], ...    'String',' ',...    'Tag','Input',...    'VerticalAlignment', 'cap');h2 = text('Parent',h1, ...    'FontSize',9, ...    'HorizontalAlignment','left', ...    'Position',[0.5 0.5], ...    'String',' ',...    'Tag','Match',...    'VerticalAlignment', 'cap');number = 0;for counter2 = 0:1:numCols    for counter1 = numRows-2:-1:0        number = number+1;        h1 = axes('Parent',h0, ...            'Units','normalized', ...            'CameraUpVector',[0 1 0], ...            'CameraUpVectorMode','manual', ...            'Position',[(colWidth+0.01)*counter2 + 0.01 (rowHeight+0.01)*counter1 + 0.01 colWidth rowHeight], ...            'Tag', num2str(number), ...            'Visible', 'off', ...            'XLim', [0 Xmax], ...            'XTick',[], ...            'YLim', [0 Ymax], ...            'YTick',[]);        if number <= NET.numCategories            set(h1, 'Visible', 'on')            h2 = text('Parent',h1, ...                'Units','normalized', ...                'FontSize',9, ...                'HorizontalAlignment','center', ...                'Position',[0.5 1], ...                'String',['Neuron ' num2str(number)], ...                'Tag',['T' num2str(number)], ...                'VerticalAlignment', 'cap');            h2 = line('Parent', h1, 'Color','k', 'Tag', ['P' num2str(number)], 'XData', 1:Xmax, 'YData', NET.weight(1:Xmax,number));        end    endend% TESTINGfor sampleNumber = 1:numSamples    % Get the current data sample.    currentData = DATA(sampleNumber).contour';    currentLength = length(currentData);    currentName = DATA(sampleNumber).name;    oldCategory = DATA(sampleNumber).category;        % Activate the categories for this sample.    % This is equivalent to bottom-up processing in ART.    bias = 0;    categoryActivation = ARTwarp_Activate_Categories(currentData, NET.weight, bias);        % Rank the activations in order from highest to lowest.    % This will allow us easier access to step through the categories.    [sortedActivations, sortedCategories] = sort(categoryActivation{1,1});        % Go through each category in the sorted list looking for the best match.    % This is equivalent to bottom-up--top-down processing in ART.    match = sortedActivations(end);    currentCategory = sortedCategories(end);    DATA(sampleNumber).match = match;    DATA(sampleNumber).category = currentCategory;    Xmax = max([Xmax length(find(NET.weight(:, currentCategory)>0))]);    Ymax = max([Ymax max(NET.weight(:, currentCategory))]);    % Graphic output    delete(findobj('Tag', 'P0'));    h0 = findobj('Tag', '0');    set(h0, 'XLim', [0 Xmax], 'YLim', [0 Ymax]);    h1 = line('Parent', h0, 'Color','r', 'Tag', 'P0', 'XData', 1:currentLength, 'YData', currentData);    h1 = findobj('Tag', 'T0');    set(h1, 'String', currentName, 'Color', 'r');    h1 = findobj('Tag', 'Match');    set(h1, 'String', sprintf('%2.2f%%', match));    h1 = findobj('Tag', 'Input');    set(h1, 'String', sprintf('%2.0f of %2.0f', sampleNumber, numSamples));    for counter3 = 1:NET.numCategories        h1 = findobj('Tag', ['P' num2str(counter3)]);        set(h1, 'Color', 'k');        h1 = findobj('Tag', ['T' num2str(counter3)]);        set(h1, 'Color', 'k');    end    h1 = findobj('Tag', ['P' num2str(DATA(sampleNumber).category)]);    set(h1, 'Color', 'r');    h1 = findobj('Tag', ['T' num2str(DATA(sampleNumber).category)]);    set(h1, 'Color', 'r');    drawnow endfprintf('The number of iterations needed was %d\n', iterationNumber);eval(['save Transient' num2str(NET.vigilance) '-test DATA NET']);return